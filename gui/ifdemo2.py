"""GUI for the AI Assistant for Data Interoperability demo.

Runs aidi tool to generate target data from source data and schemas.
"""

import os
import subprocess

import streamlit as st


def on_run_clicked():
    """Run the AI Assistant for Data Interoperability."""
    # Save inputs to files
    save_text_to_file(directory, "source_data.json", top_left)
    save_text_to_file(directory, "source_schema.json", bottom_left)
    save_text_to_file(directory, "target_schema.json", top_right)

    st.success("Inputs saved. Running assistant...")
    run_mytool(local_dir)

    print("TOOL EXITED!")

    # Read and update the bottom left text area with mytool's output
    output_content = read_output_file(output_directory, output_file)
    print(output_content)

    st.session_state.output_target_data = output_content


def save_text_to_file(directory, filename, content):
    """Save text content to a file in the specified directory."""
    os.makedirs(directory, exist_ok=True)  # Ensure directory exists
    file_path = os.path.join(directory, filename)
    with open(file_path, "w", encoding="utf-8") as file:
        file.write(content)
    return file_path


def run_mytool(directory):
    """Run the external CLI 'aidi' and handle user input request."""
    config_file = os.path.join(directory, "config_aidi.yaml")

    if not os.path.exists(config_file):
        st.error(f"Missing configuration file: {config_file}")
        return

    try:
        process = subprocess.Popen(
            ["aidi"],
            cwd=directory,
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
        )
        output, error = process.communicate(
            input="exit\n"
        )  # Send 'exit' if user input is requested
        if error:
            st.error(f"Error running aidi: {error}")
    except subprocess.CalledProcessError as e:
        st.error(f"Error running aidi: {e}")


def read_output_file(directory, filename):
    """Read the output file generated by 'mytool'."""
    file_path = os.path.join(directory, filename)
    if os.path.exists(file_path):
        with open(file_path, "r", encoding="utf-8") as file:
            return file.read()
    return ""  # Return empty string if file not found


# Streamlit UI
st.set_page_config(layout="wide")

tcol1, tcol2 = st.columns([1, 20], gap="small")
with tcol1:
    st.image("./gui/if_icon.png", width=50)
with tcol2:
    st.markdown("### AI Assistant for Data Interoperability Demo")

st.markdown("***")

col1, col2 = st.columns(2, gap="large")
local_dir = "./"
directory = "./data/data1/"  # Directory to store input files
output_directory = "./translation_folder/"
output_file = (
    "generated_target_data.json"  # Expected output file name from mytool
)

with col1:
    st.markdown("##### Input: Source Data")
    top_left = st.text_area("", key="top_left", height=200)
    st.markdown("***")
    st.markdown("##### Input: Source Schema")
    bottom_left = st.text_area(
        "",
        key="bottom_left",
        height=200,
        value=st.session_state.get("bottom_left", ""),
    )
    st.button("Run Assistant", on_click=on_run_clicked)

with col2:
    st.markdown("##### Input: Target Schema")
    top_right = st.text_area("", key="top_right", height=200)
    st.markdown("***")
    st.markdown(
        "<h5 style='color:darkgreen;'>Output: Target Data</h5>",
        unsafe_allow_html=True,
    )
    output_target_data = st.text_area("", key="output_target_data", height=200)


