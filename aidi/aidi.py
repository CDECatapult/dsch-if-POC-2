"""AI Assistant for Data Interoperability (AIDI).

This module serves as the main entry point for the AI Assistant for
Data Interoperability (AIDI) tool.
It orchestrates the workflow by loading configurations, ingesting and
validating translation data,
generating task prompts, and utilizing a multi-agent system to process
translation tasks.

Workflow Overview:
-------------------
1. Load configuration settings.
2. Load and validate translation data, schemas, and ontologies.
3. Generate a structured task prompt for data translation.
4. Create and run a `MultiAgentSystem` using the task prompt and configuration.
5. Save the generated artifacts.

The Python code generated by the AIDI tool is saved in the folder specified in
the configuration file.
By default, the output folder is a local directory named "translation_folder".

Key Functions:
--------------
- Logging: Configured to log messages to a file with the desired verbosity
level.
- Data Ingestion: Loads translation data, schemas, and ontologies from files.
- Prompt Generation: Creates an LLM-compatible prompt for translation tasks.
- Multi-Agent System Execution: Coordinates autonomous agents to process
translation tasks.
- Saving code, the generated data and the chat history to files.

Configuration:
--------------
The configuration settings are loaded from YAML files specified by
the `LoadConfig` class. These settings include:
- Logging configuration
- Data folder and prompt components
- Multi-agent system service settings

Example Usage:
--------------
Run this module as the main script to execute the data translation workflow:
```bash
python -m aidi
```
"""

import os
from argparse import ArgumentParser

from rich import print as print

from aidi.config import LoadConfig
from aidi.generic_logger import GenericLogger
from aidi.mas import MultiAgentSystem
from aidi.translation_data_ingest import TranslationDataIngest
from aidi.utils import get_generated_data, rename_last_modified_python_file


def main():
    """Main function for executing the data translation workflow.

    This function performs the following tasks:
    1. Retrieves and logs the current working directory.
    2. Loads configuration settings for the workflow, including logging,
    service settings, and custom configurations.
    3. Initializes a logger for logging workflow steps and errors.
    4. Executes the data ingestion process, including loading translation data
    and generating task prompts.
    5. Sets up and runs a Multi-Agent System (MAS) using the service settings
    and configuration to perform the translation task.
    6. Logs the group chat history or task results from the MAS process.
    7. Renames the last modified Python file in a specified directory.
    8. Executes the generated program and saves the resulting JSON data.
    9. Logs success or error messages throughout the workflow.

    Returns:
        None
    """
    # Set up argument parsing
    parser = ArgumentParser(description="Run AIDI with a configuration file.")
    parser.add_argument(
        "-c",
        "--config",
        type=str,
        default="config_aidi.yaml",
        help="Path to the configuration file (default: config_aidi.yaml)",
    )

    # Parse the arguments
    args = parser.parse_args()

    # Retrieve the config file path
    config_file = args.config
    if config_file:
        print(f"Using configuration file: {config_file}")

    # Get the current working directory
    current_directory = os.getcwd()
    print(f"The current working directory is: {current_directory}")

    # load configuration
    (
        config_list,
        custom_config_list,
        service_settings,
        log_config,
        full_config,
    ) = LoadConfig(config_file).get_configuration()

    generic_logger = GenericLogger(
        level=log_config["level"], log_file_name=log_config["log_file_name"]
    )
    logger = generic_logger.logger

    logger.info("DATA TRANSLATION WORKFLOW STARTED")
    try:
        data_ingest = TranslationDataIngest(
            data_folder=full_config["data"]["data_folder"],
            prompt_components=full_config["prompt"]["prompt_components"],
            prompt_template=full_config["prompt"]["prompt_template"],
        )
        task_prompt, translation_data = data_ingest.load_translation_data()
        mas = MultiAgentSystem(service_settings, full_config)
        groupchat_history_custom = mas.create_and_run(task_prompt)
        logger.info(groupchat_history_custom)

    except Exception as e:
        logger.error(f"Exception: {e}")

    # print(Pretty(groupchat_history_custom))

    try:
        ## rename the python file
        code_dir = full_config["code"].get("code_folder", "translation_folder")
        rename_last_modified_python_file(code_dir)

        # execute the program and save the json file
        get_generated_data(code_dir)

        logger.info("Final code and data file generated successfully.")


    except Exception as e:
        logger.error(
            f"Unable to generate final code or data file. Exception: {e}"
        )
        print("Unable to generate final code or data file. Please start over!")

    logger.info("DATA TRANSLATION WORKFLOW ENDED")


if __name__ == "__main__":
    main()
