name: Production

# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# Build the documentation and (disabled) upload the static HTML files as an artifact.

on:
  push:
    branches:
      - main
    # Alternative: only build for tags.
    # tags:
    #   - '*'
  pull_request:
    branches: [ "main" ]

    # security: restrict permissions for CI jobs.
permissions:
  contents: read

jobs:
  test:
    name: test with Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.10", "3.11", "3.12" ]
        os: 
          - ubuntu-latest
          - windows-latest
          - macos-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache Poetry Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pypoetry
        key: ${{ runner.os }}-poetry-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-${{ matrix.python-version }}-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry install

    - name: Run Tox
      run: poetry run tox 

  # Build the documentation and upload the static HTML files as an artifact.
  build:
    name: Build the documentation with ${{ matrix.python-version }} on ${{ matrix.os }}
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12" ]
        os: 
          - ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache Poetry Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-${{ matrix.python-version }}-

      # ADJUST THIS: install all dependencies (including pdoc)
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install
      # ADJUST THIS: build your documentation into docs/.
      - run: poetry run python -m pdoc aidi -o ./docs

      - uses: actions/upload-pages-artifact@v3
        with:
          path: docs/

  # # Deploy the artifact to GitHub pages.
  # # This is a separate job so that only actions/deploy-pages has the necessary permissions.
  # deploy:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   permissions:
  #     pages: write
  #     id-token: write
  #   environment:
  #     name: github-pages
  #     url: ${{ steps.deployment.outputs.page_url }}
  #   steps:
  #     - id: deployment
  #       uses: actions/deploy-pages@v4