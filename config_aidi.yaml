logging:
  level: "INFO"
  log_file_name: "./translation_log.log"

data:
  data_folder: "./data/data1/"

code:
  code_folder: "./translation_folder/"

# active_service:
# active_service: "ollama" # "ollama"
active_service: "OpenAI" 

services:
  OpenAI:
    service_name: "OpenAI"
    model: &openai_model "gpt-4o-2024-08-06"  # Anchor for the model field
#     model: &openai_model "gpt-4o-2024-11-20"  # Anchor for the model field
    embedding: "text-embedding-3-small"
    api_key: &key "YOUR_API_KEY"  # Actual key needed
    selected_model: *openai_model
    config_list:
      - model: *openai_model
        api_key: *key  # Uses environment variable for security
    custom_config_list:
      - model: "custom_llm_json"
        model_client_cls: "CustomLLMClient"

  ollama:
    service_name: "ollama"
    base_url: "http://52.56.167.144:11434/"
    base_url_compatible_with_openai_api: "http://52.56.167.144:11434/v1/"
    model: &ollama_model "mistral-nemo"  # Anchor for the model field
    selected_model: *ollama_model
    embedding: "all-minilm"
    config_list:
      - model: *ollama_model
        base_url: "http://52.56.167.144:11434/v1/"
        api_type: "open_ai"
        api_key: "ollama"  # Placeholder, no actual key needed
        price: [0, 0]
    custom_config_list:
      - model: "custom_llm_json"
        model_client_cls: "CustomLLMClient"

prompt:
# components to be added to the task prompt 
#         "sd": source data
#         "td": target data
#         "sds1": source data sample 1
#         "tds1": target data sample 1
#         "sds2": source data sample 2
#         "tds2": target data sample 2
#         "ss": source schema
#         "ts": target schema
#         "so": source ontology
#         "to": target ontology
  
  # prompt_components: ["sd", "td","sds1", "tds1","sds2", "tds2", "ss", "ts", "so", "to"]
  prompt_components: ["sd","ts"]

  prompt_template: |
    Translate source data to target data according to the provided data, schema, and ontology information.

    Source Data Sample 1:
    {source_data_sample1}

    Target Data Sample 1:
    {target_data_sample1}

    Source Data Sample 2:
    {source_data_sample2}

    Target Data Sample 2:
    {target_data_sample2}

    Source Data Schema:
    {source_schema}

    Target Data Schema:
    {target_schema}

    Source Ontology:
    {source_ontology_sample}

    Target Ontology:
    {target_ontology_sample}

    Instructions:
    Translate fields in the source data to match the target data format, using both schema structures 
    and ontology mappings. Apply any necessary transformations as indicated by ontology relationships.
    
    Source Data to be translated:
    {source_data}
    
    Target Data:
    {target_data}

  planner_system_message: |
        You are a world class task planning algorithm capable of breaking apart tasks into dependant subtasks, such that the answers can be used to enable the system completing the main task. Do not complete the user task, simply provide a correct compute graph with good specific tasks to ask and relevant subtasks. Before completing the list of tasks, think step by step to get a better understanding the problem.
        Write out translation mapping rules to translate from source data model to target data model using the information that are given to you.
        Be careful with complex conditions like:
        - mapping value of a source field to name of a target field
        - mapping value of a source field to value of target field if the target field is created by mapping from a value of an another source field.
        - mapping a source field name to multiple target field names
        - Splitting a source field name into more than one target field names
        - Splitting a source field value into more than one target field value
        Make sure target model values of target fields are populated accordingly.
        Make sure the formats of field values are properly addressed.

  user_proxy_system_message:
        - "A human admin. Give the task, and send instructions to perform a data translation."
        - "Do not accept other kind of tasks not related to data translation and transformation."
  
  coder_system_message: |
        Python Code Writer. You will write python code. Wrap the code in a ```python``` code block that specifies the python script type. 
        The user can't modify your code. So do not suggest incomplete code which requires others to modify.
        Don't use a code block if it's not intended to be executed by the executor.
        Don't include multiple code blocks, and only output in one code block response. Do not ask others to copy and paste the result.
        Insert "PLACEHOLDER" in the generated code if you can not find suitable mappings.
        Always use 'print' to print the output.
        Always start with ```python
        Check the execution result returned by the executor.
        If the result indicates there is an error, fix the error and output the code again. Suggest the full code instead of partial code or code changes. If the error can't be fixed or if the task is not solved even after the code is executed successfully, analyze the problem, revisit your assumption, collect additional info you need, and think of a different approach to try.

  executor_system_message: "Executor. Execute the code written by the Coder and report the result."

  validator_system_message: |
        Validator. Please validate the 'Code output' of the executed code by the Executor against the target schema.
        Be very strict on asserting against the json schema. Do not make assumptions. Just compare it against. 
        - make sure all required fields are present and correctly formatted according to the schema specifications. 
        - make sure the types of each field are correct, and the nested structures are properly organized. 
        - make sure the date and email formats are valid, and the boolean, integer, and string types are used appropriately. 
        - make sure the array structures are correctly implemented.
        
        Please respond with VALID or INVALID at the end of your response.

  tool_calling_validator_system_message: |
        Validator.You will assess if the generated target data is validated using the tools provided.
        Relay the result. Based on the results, please reply with VALID or INVALID at the end of your response.
  
  tool_runner_system_message: |
        Tool runner. This agent runs all functions for the group. 
        Anytime an agent needs information they will prompt this agent with the indicated function and arguments.


group_chat:
  messages: []
  max_round: 50
  send_introductions: true
  cache_chat: false
  # please note that structured_output and validation_by_tool options work only for OpenAI mdoels at this time 
  structured_output: true
  validation_by_tool: true
